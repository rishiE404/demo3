{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport { useIsFocused } from '@react-navigation/native';\nimport PlacesList from \"../components/Places/PlacesList\";\nimport { fetchPlaces } from \"../util/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction AllPlaces(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadedPlaces = _useState2[0],\n      setLoadedPlaces = _useState2[1];\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    function loadPlaces() {\n      var places;\n      return _regeneratorRuntime.async(function loadPlaces$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPlaces());\n\n            case 2:\n              places = _context.sent;\n              setLoadedPlaces(places);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (isFocused) {\n      loadPlaces();\n    }\n  }, [isFocused]);\n  return _jsx(PlacesList, {\n    places: loadedPlaces\n  });\n}\n\nexport default AllPlaces;","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/screens/AllPlaces.js"],"names":["useEffect","useState","useIsFocused","PlacesList","fetchPlaces","AllPlaces","route","loadedPlaces","setLoadedPlaces","isFocused","loadPlaces","places"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAOC,UAAP;AACA,SAASC,WAAT;;;AAEA,SAASC,SAAT,OAA8B;AAAA,MAATC,KAAS,QAATA,KAAS;;AAC5B,kBAAwCL,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAOM,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,SAAS,GAAGP,YAAY,EAA9B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeU,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACuBN,WAAW,EADlC;;AAAA;AACQO,cAAAA,MADR;AAEEH,cAAAA,eAAe,CAACG,MAAD,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,QAAIF,SAAJ,EAAe;AACbC,MAAAA,UAAU;AAEX;AACF,GAVQ,EAUN,CAACD,SAAD,CAVM,CAAT;AAYA,SAAO,KAAC,UAAD;AAAY,IAAA,MAAM,EAAEF;AAApB,IAAP;AACD;;AAED,eAAeF,SAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useIsFocused } from '@react-navigation/native';\n\nimport PlacesList from '../components/Places/PlacesList';\nimport { fetchPlaces } from '../util/database';\n\nfunction AllPlaces({ route }) {\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\n\n  const isFocused = useIsFocused();\n\n  useEffect(() => {\n    async function loadPlaces() {\n      const places = await fetchPlaces();\n      setLoadedPlaces(places);\n    }\n\n    if (isFocused) {\n      loadPlaces();\n      // setLoadedPlaces((curPlaces) => [...curPlaces, route.params.place]);\n    }\n  }, [isFocused]);\n\n  return <PlacesList places={loadedPlaces} />;\n}\n\nexport default AllPlaces;\n"]},"metadata":{},"sourceType":"module"}