{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { getCurrentPositionAsync, useForegroundPermissions, PermissionStatus } from 'expo-location';\nimport { useNavigation, useRoute, useIsFocused } from '@react-navigation/native';\nimport { Colors } from \"../../constants/colors\";\nimport OutlinedButton from \"../UI/OutlinedButton\";\nimport { getAddress, getMapPreview } from \"../../util/location\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LocationPicker(_ref) {\n  var onPickLocation = _ref.onPickLocation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedLocation = _useState2[0],\n      setPickedLocation = _useState2[1];\n\n  var isFocused = useIsFocused();\n  var navigation = useNavigation();\n  var route = useRoute();\n\n  var _useForegroundPermiss = useForegroundPermissions(),\n      _useForegroundPermiss2 = _slicedToArray(_useForegroundPermiss, 2),\n      locationPermissionInformation = _useForegroundPermiss2[0],\n      requestPermission = _useForegroundPermiss2[1];\n\n  useEffect(function () {\n    if (isFocused && route.params) {\n      var mapPickedLocation = {\n        lat: route.params.pickedLat,\n        lng: route.params.pickedLng\n      };\n      setPickedLocation(mapPickedLocation);\n    }\n  }, [route, isFocused]);\n  useEffect(function () {\n    function handleLocation() {\n      var address;\n      return _regeneratorRuntime.async(function handleLocation$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!pickedLocation) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(getAddress(pickedLocation.lat, pickedLocation.lng));\n\n            case 3:\n              address = _context.sent;\n              onPickLocation(_objectSpread(_objectSpread({}, pickedLocation), {}, {\n                address: address\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    handleLocation();\n  }, [pickedLocation, onPickLocation]);\n\n  function verifyPermissions() {\n    var permissionResponse;\n    return _regeneratorRuntime.async(function verifyPermissions$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(locationPermissionInformation.status === PermissionStatus.UNDETERMINED)) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(requestPermission());\n\n          case 3:\n            permissionResponse = _context2.sent;\n            return _context2.abrupt(\"return\", permissionResponse.granted);\n\n          case 5:\n            if (!(locationPermissionInformation.status === PermissionStatus.DENIED)) {\n              _context2.next = 8;\n              break;\n            }\n\n            Alert.alert('Insufficient Permissions!', 'You need to grant location permissions to use this app.');\n            return _context2.abrupt(\"return\", false);\n\n          case 8:\n            return _context2.abrupt(\"return\", true);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getLocationHandler() {\n    var hasPermission, location;\n    return _regeneratorRuntime.async(function getLocationHandler$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(verifyPermissions());\n\n          case 2:\n            hasPermission = _context3.sent;\n\n            if (hasPermission) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(getCurrentPositionAsync());\n\n          case 7:\n            location = _context3.sent;\n            setPickedLocation({\n              lat: location.coords.latitude,\n              lng: location.coords.longitude\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function pickOnMapHandler() {\n    navigation.navigate('Map');\n  }\n\n  var locationPreview = _jsx(Text, {\n    children: \"No location picked yet.\"\n  });\n\n  if (pickedLocation) {\n    locationPreview = _jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: getMapPreview(pickedLocation.lat, pickedLocation.lng)\n      }\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.mapPreview,\n      children: locationPreview\n    }), _jsxs(View, {\n      style: styles.actions,\n      children: [_jsx(OutlinedButton, {\n        icon: \"location\",\n        onPress: getLocationHandler,\n        children: \"Locate User\"\n      }), _jsx(OutlinedButton, {\n        icon: \"map\",\n        onPress: pickOnMapHandler,\n        children: \"Pick on Map\"\n      })]\n    })]\n  });\n}\n\nexport default LocationPicker;\nvar styles = StyleSheet.create({\n  mapPreview: {\n    width: '100%',\n    height: 200,\n    marginVertical: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.primary100,\n    borderRadius: 4,\n    overflow: 'hidden'\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  image: {\n    width: '100%',\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/components/Places/LocationPicker.js"],"names":["useEffect","useState","getCurrentPositionAsync","useForegroundPermissions","PermissionStatus","useNavigation","useRoute","useIsFocused","Colors","OutlinedButton","getAddress","getMapPreview","LocationPicker","onPickLocation","pickedLocation","setPickedLocation","isFocused","navigation","route","locationPermissionInformation","requestPermission","params","mapPickedLocation","lat","pickedLat","lng","pickedLng","handleLocation","address","verifyPermissions","status","UNDETERMINED","permissionResponse","granted","DENIED","Alert","alert","getLocationHandler","hasPermission","location","coords","latitude","longitude","pickOnMapHandler","navigate","locationPreview","styles","image","uri","mapPreview","actions","StyleSheet","create","width","height","marginVertical","justifyContent","alignItems","backgroundColor","primary100","borderRadius","overflow","flexDirection"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Alert, View, StyleSheet, Image, Text } from 'react-native';\nimport {\n  getCurrentPositionAsync,\n  useForegroundPermissions,\n  PermissionStatus,\n} from 'expo-location';\nimport {\n  useNavigation,\n  useRoute,\n  useIsFocused,\n} from '@react-navigation/native';\n\nimport { Colors } from '../../constants/colors';\nimport OutlinedButton from '../UI/OutlinedButton';\nimport { getAddress, getMapPreview } from '../../util/location';\n\nfunction LocationPicker({ onPickLocation }) {\n  const [pickedLocation, setPickedLocation] = useState();\n  const isFocused = useIsFocused();\n\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  const [locationPermissionInformation, requestPermission] =\n    useForegroundPermissions();\n\n  useEffect(() => {\n    if (isFocused && route.params) {\n      const mapPickedLocation = {\n        lat: route.params.pickedLat,\n        lng: route.params.pickedLng,\n      };\n      setPickedLocation(mapPickedLocation);\n    }\n  }, [route, isFocused]);\n\n  useEffect(() => {\n    async function handleLocation() {\n      if (pickedLocation) {\n        const address = await getAddress(\n          pickedLocation.lat,\n          pickedLocation.lng\n        );\n        onPickLocation({ ...pickedLocation, address: address });\n      }\n    }\n\n    handleLocation();\n  }, [pickedLocation, onPickLocation]);\n\n  async function verifyPermissions() {\n    if (\n      locationPermissionInformation.status === PermissionStatus.UNDETERMINED\n    ) {\n      const permissionResponse = await requestPermission();\n\n      return permissionResponse.granted;\n    }\n\n    if (locationPermissionInformation.status === PermissionStatus.DENIED) {\n      Alert.alert(\n        'Insufficient Permissions!',\n        'You need to grant location permissions to use this app.'\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  async function getLocationHandler() {\n    const hasPermission = await verifyPermissions();\n\n    if (!hasPermission) {\n      return;\n    }\n\n    const location = await getCurrentPositionAsync();\n    setPickedLocation({\n      lat: location.coords.latitude,\n      lng: location.coords.longitude,\n    });\n  }\n\n  function pickOnMapHandler() {\n    navigation.navigate('Map');\n  }\n\n  let locationPreview = <Text>No location picked yet.</Text>;\n\n  if (pickedLocation) {\n    locationPreview = (\n      <Image\n        style={styles.image}\n        source={{\n          uri: getMapPreview(pickedLocation.lat, pickedLocation.lng),\n        }}\n      />\n    );\n  }\n\n  return (\n    <View>\n      <View style={styles.mapPreview}>{locationPreview}</View>\n      <View style={styles.actions}>\n        <OutlinedButton icon=\"location\" onPress={getLocationHandler}>\n          Locate User\n        </OutlinedButton>\n        <OutlinedButton icon=\"map\" onPress={pickOnMapHandler}>\n          Pick on Map\n        </OutlinedButton>\n      </View>\n    </View>\n  );\n}\n\nexport default LocationPicker;\n\nconst styles = StyleSheet.create({\n  mapPreview: {\n    width: '100%',\n    height: 200,\n    marginVertical: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.primary100,\n    borderRadius: 4,\n    overflow: 'hidden',\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n    // borderRadius: 4\n  },\n});\n"]},"metadata":{},"sourceType":"module"}