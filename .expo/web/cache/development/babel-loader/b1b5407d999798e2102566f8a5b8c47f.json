{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AppLoading from 'expo-app-loading';\nimport AllPlaces from \"./screens/AllPlaces\";\nimport AddPlace from \"./screens/AddPlace\";\nimport IconButton from \"./components/UI/IconButton\";\nimport { Colors } from \"./constants/colors\";\nimport Map from \"./screens/Map\";\nimport { init } from \"./util/database\";\nimport PlaceDetails from \"./screens/PlaceDetails\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dbInitialized = _useState2[0],\n      setDbInitialized = _useState2[1];\n\n  useEffect(function () {\n    init().then(function () {\n      setDbInitialized(true);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }, []);\n\n  if (!dbInitialized) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerStyle: {\n            backgroundColor: Colors.primary500\n          },\n          headerTintColor: Colors.gray700,\n          contentStyle: {\n            backgroundColor: Colors.gray700\n          }\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"AllPlaces\",\n          component: AllPlaces,\n          options: function options(_ref) {\n            var navigation = _ref.navigation;\n            return {\n              title: 'Your Favorite Places',\n              headerRight: function headerRight(_ref2) {\n                var tintColor = _ref2.tintColor;\n                return _jsx(IconButton, {\n                  icon: \"add\",\n                  size: 24,\n                  color: tintColor,\n                  onPress: function onPress() {\n                    return navigation.navigate('AddPlace');\n                  }\n                });\n              }\n            };\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"AddPlace\",\n          component: AddPlace,\n          options: {\n            title: 'Add a new Place'\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Map\",\n          component: Map\n        }), _jsx(Stack.Screen, {\n          name: \"PlaceDetails\",\n          component: PlaceDetails,\n          options: {\n            title: 'Loading Place...'\n          }\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/App.js"],"names":["useEffect","useState","StatusBar","NavigationContainer","createNativeStackNavigator","AppLoading","AllPlaces","AddPlace","IconButton","Colors","Map","init","PlaceDetails","Stack","App","dbInitialized","setDbInitialized","then","catch","err","console","log","headerStyle","backgroundColor","primary500","headerTintColor","gray700","contentStyle","navigation","title","headerRight","tintColor","navigate"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,OAAOC,UAAP;AACA,SAASC,MAAT;AACA,OAAOC,GAAP;AACA,SAASC,IAAT;AACA,OAAOC,YAAP;;;;AAEA,IAAMC,KAAK,GAAGT,0BAA0B,EAAxC;AAEA,eAAe,SAASU,GAAT,GAAe;AAC5B,kBAA0Cb,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOc,aAAP;AAAA,MAAsBC,gBAAtB;;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,IAAI,GACDM,IADH,CACQ,YAAM;AACVD,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAHH,EAIGE,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KANH;AAOD,GARQ,EAQN,EARM,CAAT;;AAUA,MAAI,CAACJ,aAAL,EAAoB;AAClB,WAAO,KAAC,UAAD,KAAP;AACD;;AAED,SACE;AAAA,eACE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MADF,EAEE,KAAC,mBAAD;AAAA,gBACE,MAAC,KAAD,CAAO,SAAP;AACE,QAAA,aAAa,EAAE;AACbO,UAAAA,WAAW,EAAE;AAAEC,YAAAA,eAAe,EAAEd,MAAM,CAACe;AAA1B,WADA;AAEbC,UAAAA,eAAe,EAAEhB,MAAM,CAACiB,OAFX;AAGbC,UAAAA,YAAY,EAAE;AAAEJ,YAAAA,eAAe,EAAEd,MAAM,CAACiB;AAA1B;AAHD,SADjB;AAAA,mBAOE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAC,WADP;AAEE,UAAA,SAAS,EAAEpB,SAFb;AAGE,UAAA,OAAO,EAAE;AAAA,gBAAGsB,UAAH,QAAGA,UAAH;AAAA,mBAAqB;AAC5BC,cAAAA,KAAK,EAAE,sBADqB;AAE5BC,cAAAA,WAAW,EAAE;AAAA,oBAAGC,SAAH,SAAGA,SAAH;AAAA,uBACX,KAAC,UAAD;AACE,kBAAA,IAAI,EAAC,KADP;AAEE,kBAAA,IAAI,EAAE,EAFR;AAGE,kBAAA,KAAK,EAAEA,SAHT;AAIE,kBAAA,OAAO,EAAE;AAAA,2BAAMH,UAAU,CAACI,QAAX,CAAoB,UAApB,CAAN;AAAA;AAJX,kBADW;AAAA;AAFe,aAArB;AAAA;AAHX,UAPF,EAsBE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,SAAS,EAAEzB,QAFb;AAGE,UAAA,OAAO,EAAE;AACPsB,YAAAA,KAAK,EAAE;AADA;AAHX,UAtBF,EA6BE,KAAC,KAAD,CAAO,MAAP;AAAc,UAAA,IAAI,EAAC,KAAnB;AAAyB,UAAA,SAAS,EAAEnB;AAApC,UA7BF,EA8BE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAC,cADP;AAEE,UAAA,SAAS,EAAEE,YAFb;AAGE,UAAA,OAAO,EAAE;AACPiB,YAAAA,KAAK,EAAE;AADA;AAHX,UA9BF;AAAA;AADF,MAFF;AAAA,IADF;AA6CD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AppLoading from 'expo-app-loading';\n\nimport AllPlaces from './screens/AllPlaces';\nimport AddPlace from './screens/AddPlace';\nimport IconButton from './components/UI/IconButton';\nimport { Colors } from './constants/colors';\nimport Map from './screens/Map';\nimport { init } from './util/database';\nimport PlaceDetails from './screens/PlaceDetails';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [dbInitialized, setDbInitialized] = useState(false);\n\n  useEffect(() => {\n    init()\n      .then(() => {\n        setDbInitialized(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  if (!dbInitialized) {\n    return <AppLoading />;\n  }\n\n  return (\n    <>\n      <StatusBar style=\"dark\" />\n      <NavigationContainer>\n        <Stack.Navigator\n          screenOptions={{\n            headerStyle: { backgroundColor: Colors.primary500 },\n            headerTintColor: Colors.gray700,\n            contentStyle: { backgroundColor: Colors.gray700 },\n          }}\n        >\n          <Stack.Screen\n            name=\"AllPlaces\"\n            component={AllPlaces}\n            options={({ navigation }) => ({\n              title: 'Your Favorite Places',\n              headerRight: ({ tintColor }) => (\n                <IconButton\n                  icon=\"add\"\n                  size={24}\n                  color={tintColor}\n                  onPress={() => navigation.navigate('AddPlace')}\n                />\n              ),\n            })}\n          />\n          <Stack.Screen\n            name=\"AddPlace\"\n            component={AddPlace}\n            options={{\n              title: 'Add a new Place',\n            }}\n          />\n          <Stack.Screen name=\"Map\" component={Map} />\n          <Stack.Screen\n            name=\"PlaceDetails\"\n            component={PlaceDetails}\n            options={{\n              title: 'Loading Place...',\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}