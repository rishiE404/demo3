{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport OutlinedButton from \"../components/UI/OutlinedButton\";\nimport { Colors } from \"../constants/colors\";\nimport { fetchPlaceDetails } from \"../util/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PlaceDetails(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetchedPlace = _useState2[0],\n      setFetchedPlace = _useState2[1];\n\n  function showOnMapHandler() {\n    navigation.navigate('Map', {\n      initialLat: fetchedPlace.location.lat,\n      initialLng: fetchedPlace.location.lng\n    });\n  }\n\n  var selectedPlaceId = route.params.placeId;\n  useEffect(function () {\n    function loadPlaceData() {\n      var place;\n      return _regeneratorRuntime.async(function loadPlaceData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPlaceDetails(selectedPlaceId));\n\n            case 2:\n              place = _context.sent;\n              setFetchedPlace(place);\n              navigation.setOptions({\n                title: place.title\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    loadPlaceData();\n  }, [selectedPlaceId]);\n\n  if (!fetchedPlace) {\n    return _jsx(View, {\n      style: styles.fallback,\n      children: _jsx(Text, {\n        children: \"Loading place data...\"\n      })\n    });\n  }\n\n  return _jsxs(ScrollView, {\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: fetchedPlace.imageUri\n      }\n    }), _jsxs(View, {\n      style: styles.locationContainer,\n      children: [_jsx(View, {\n        style: styles.addressContainer,\n        children: _jsx(Text, {\n          style: styles.address,\n          children: fetchedPlace.address\n        })\n      }), _jsx(OutlinedButton, {\n        icon: \"map\",\n        onPress: showOnMapHandler,\n        children: \"View on Map\"\n      })]\n    })]\n  });\n}\n\nexport default PlaceDetails;\nvar styles = StyleSheet.create({\n  fallback: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  image: {\n    height: '35%',\n    minHeight: 300,\n    width: '100%'\n  },\n  locationContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  addressContainer: {\n    padding: 20\n  },\n  address: {\n    color: Colors.primary500,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/screens/PlaceDetails.js"],"names":["useEffect","useState","OutlinedButton","Colors","fetchPlaceDetails","PlaceDetails","route","navigation","fetchedPlace","setFetchedPlace","showOnMapHandler","navigate","initialLat","location","lat","initialLng","lng","selectedPlaceId","params","placeId","loadPlaceData","place","setOptions","title","styles","fallback","image","uri","imageUri","locationContainer","addressContainer","address","StyleSheet","create","flex","justifyContent","alignItems","height","minHeight","width","padding","color","primary500","textAlign","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { ScrollView, Image, View, Text, StyleSheet } from 'react-native';\n\nimport OutlinedButton from '../components/UI/OutlinedButton';\nimport { Colors } from '../constants/colors';\nimport { fetchPlaceDetails } from '../util/database';\n\nfunction PlaceDetails({ route, navigation }) {\n  const [fetchedPlace, setFetchedPlace] = useState();\n\n  function showOnMapHandler() {\n    navigation.navigate('Map', {\n      initialLat: fetchedPlace.location.lat,\n      initialLng: fetchedPlace.location.lng,\n    });\n  }\n\n  const selectedPlaceId = route.params.placeId;\n\n  useEffect(() => {\n    async function loadPlaceData() {\n      const place = await fetchPlaceDetails(selectedPlaceId);\n      setFetchedPlace(place);\n      navigation.setOptions({\n        title: place.title,\n      });\n    }\n\n    loadPlaceData();\n  }, [selectedPlaceId]);\n\n  if (!fetchedPlace) {\n    return (\n      <View style={styles.fallback}>\n        <Text>Loading place data...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView>\n      <Image style={styles.image} source={{ uri: fetchedPlace.imageUri }} />\n      <View style={styles.locationContainer}>\n        <View style={styles.addressContainer}>\n          <Text style={styles.address}>{fetchedPlace.address}</Text>\n        </View>\n        <OutlinedButton icon=\"map\" onPress={showOnMapHandler}>\n          View on Map\n        </OutlinedButton>\n      </View>\n    </ScrollView>\n  );\n}\n\nexport default PlaceDetails;\n\nconst styles = StyleSheet.create({\n  fallback: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  image: {\n    height: '35%',\n    minHeight: 300,\n    width: '100%',\n  },\n  locationContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  addressContainer: {\n    padding: 20,\n  },\n  address: {\n    color: Colors.primary500,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}