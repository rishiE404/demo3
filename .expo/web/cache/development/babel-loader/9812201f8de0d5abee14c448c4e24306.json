{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useLayoutEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport MapView, { Marker } from 'react-native-maps';\nimport IconButton from \"../components/UI/IconButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Map(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var initialLocation = route.params && {\n    lat: route.params.initialLat,\n    lng: route.params.initialLng\n  };\n\n  var _useState = useState(initialLocation),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLocation = _useState2[0],\n      setSelectedLocation = _useState2[1];\n\n  var region = {\n    latitude: initialLocation ? initialLocation.lat : 37.78,\n    longitude: initialLocation ? initialLocation.lng : -122.43,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n\n  function selectLocationHandler(event) {\n    if (initialLocation) {\n      return;\n    }\n\n    var lat = event.nativeEvent.coordinate.latitude;\n    var lng = event.nativeEvent.coordinate.longitude;\n    setSelectedLocation({\n      lat: lat,\n      lng: lng\n    });\n  }\n\n  var savePickedLocationHandler = useCallback(function () {\n    if (!selectedLocation) {\n      Alert.alert('No location picked!', 'You have to pick a location (by tapping on the map) first!');\n      return;\n    }\n\n    navigation.navigate('AddPlace', {\n      pickedLat: selectedLocation.lat,\n      pickedLng: selectedLocation.lng\n    });\n  }, [navigation, selectedLocation]);\n  useLayoutEffect(function () {\n    if (initialLocation) {\n      return;\n    }\n\n    navigation.setOptions({\n      headerRight: function headerRight(_ref2) {\n        var tintColor = _ref2.tintColor;\n        return _jsx(IconButton, {\n          icon: \"save\",\n          size: 24,\n          color: tintColor,\n          onPress: savePickedLocationHandler\n        });\n      }\n    });\n  }, [navigation, savePickedLocationHandler, initialLocation]);\n  return _jsx(MapView, {\n    style: styles.map,\n    initialRegion: region,\n    onPress: selectLocationHandler,\n    children: selectedLocation && _jsx(Marker, {\n      title: \"Picked Location\",\n      coordinate: {\n        latitude: selectedLocation.lat,\n        longitude: selectedLocation.lng\n      }\n    })\n  });\n}\n\nexport default Map;\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/screens/Map.js"],"names":["useCallback","useLayoutEffect","useState","MapView","Marker","IconButton","Map","navigation","route","initialLocation","params","lat","initialLat","lng","initialLng","selectedLocation","setSelectedLocation","region","latitude","longitude","latitudeDelta","longitudeDelta","selectLocationHandler","event","nativeEvent","coordinate","savePickedLocationHandler","Alert","alert","navigate","pickedLat","pickedLng","setOptions","headerRight","tintColor","styles","map","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import { useCallback, useLayoutEffect, useState } from 'react';\nimport { Alert, StyleSheet } from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\n\nimport IconButton from '../components/UI/IconButton';\n\nfunction Map({ navigation, route }) {\n  const initialLocation = route.params && {\n    lat: route.params.initialLat,\n    lng: route.params.initialLng,\n  };\n\n  const [selectedLocation, setSelectedLocation] = useState(initialLocation);\n\n  const region = {\n    latitude: initialLocation ? initialLocation.lat : 37.78,\n    longitude: initialLocation ? initialLocation.lng : -122.43,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  };\n\n  function selectLocationHandler(event) {\n    if (initialLocation) {\n      return;\n    }\n    const lat = event.nativeEvent.coordinate.latitude;\n    const lng = event.nativeEvent.coordinate.longitude;\n\n    setSelectedLocation({ lat: lat, lng: lng });\n  }\n\n  const savePickedLocationHandler = useCallback(() => {\n    if (!selectedLocation) {\n      Alert.alert(\n        'No location picked!',\n        'You have to pick a location (by tapping on the map) first!'\n      );\n      return;\n    }\n\n    navigation.navigate('AddPlace', {\n      pickedLat: selectedLocation.lat,\n      pickedLng: selectedLocation.lng,\n    });\n  }, [navigation, selectedLocation]);\n\n  useLayoutEffect(() => {\n    if (initialLocation) {\n      return;\n    }\n    navigation.setOptions({\n      headerRight: ({ tintColor }) => (\n        <IconButton\n          icon=\"save\"\n          size={24}\n          color={tintColor}\n          onPress={savePickedLocationHandler}\n        />\n      ),\n    });\n  }, [navigation, savePickedLocationHandler, initialLocation]);\n\n  return (\n    <MapView\n      style={styles.map}\n      initialRegion={region}\n      onPress={selectLocationHandler}\n    >\n      {selectedLocation && (\n        <Marker\n          title=\"Picked Location\"\n          coordinate={{\n            latitude: selectedLocation.lat,\n            longitude: selectedLocation.lng,\n          }}\n        />\n      )}\n    </MapView>\n  );\n}\n\nexport default Map;\n\nconst styles = StyleSheet.create({\n  map: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}