{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { launchCameraAsync, useCameraPermissions, PermissionStatus } from 'expo-image-picker';\nimport { useState } from 'react';\nimport { Colors } from \"../../constants/colors\";\nimport OutlinedButton from \"../UI/OutlinedButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ImagePicker(_ref) {\n  var onTakeImage = _ref.onTakeImage;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedImage = _useState2[0],\n      setPickedImage = _useState2[1];\n\n  var _useCameraPermissions = useCameraPermissions(),\n      _useCameraPermissions2 = _slicedToArray(_useCameraPermissions, 2),\n      cameraPermissionInformation = _useCameraPermissions2[0],\n      requestPermission = _useCameraPermissions2[1];\n\n  function verifyPermissions() {\n    var permissionResponse;\n    return _regeneratorRuntime.async(function verifyPermissions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(cameraPermissionInformation.status === PermissionStatus.UNDETERMINED)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(requestPermission());\n\n          case 3:\n            permissionResponse = _context.sent;\n            return _context.abrupt(\"return\", permissionResponse.granted);\n\n          case 5:\n            if (!(cameraPermissionInformation.status === PermissionStatus.DENIED)) {\n              _context.next = 8;\n              break;\n            }\n\n            Alert.alert('Insufficient Permissions!', 'You need to grant camera permissions to use this app.');\n            return _context.abrupt(\"return\", false);\n\n          case 8:\n            return _context.abrupt(\"return\", true);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function takeImageHandler() {\n    var hasPermission, image;\n    return _regeneratorRuntime.async(function takeImageHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(verifyPermissions());\n\n          case 2:\n            hasPermission = _context2.sent;\n\n            if (hasPermission) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(launchCameraAsync({\n              allowsEditing: true,\n              aspect: [16, 9],\n              quality: 0.5\n            }));\n\n          case 7:\n            image = _context2.sent;\n            setPickedImage(image.uri);\n            onTakeImage(image.uri);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var imagePreview = _jsx(Text, {\n    children: \"No image taken yet.\"\n  });\n\n  if (pickedImage) {\n    imagePreview = _jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: pickedImage\n      }\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.imagePreview,\n      children: imagePreview\n    }), _jsx(OutlinedButton, {\n      icon: \"camera\",\n      onPress: takeImageHandler,\n      children: \"Take Image\"\n    })]\n  });\n}\n\nexport default ImagePicker;\nvar styles = StyleSheet.create({\n  imagePreview: {\n    width: '100%',\n    height: 200,\n    marginVertical: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.primary100,\n    borderRadius: 4,\n    overflow: 'hidden'\n  },\n  image: {\n    width: '100%',\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["/Users/rishishah/Developer/ReactNativeApps/demo3/components/Places/ImagePicker.js"],"names":["launchCameraAsync","useCameraPermissions","PermissionStatus","useState","Colors","OutlinedButton","ImagePicker","onTakeImage","pickedImage","setPickedImage","cameraPermissionInformation","requestPermission","verifyPermissions","status","UNDETERMINED","permissionResponse","granted","DENIED","Alert","alert","takeImageHandler","hasPermission","allowsEditing","aspect","quality","image","uri","imagePreview","styles","StyleSheet","create","width","height","marginVertical","justifyContent","alignItems","backgroundColor","primary100","borderRadius","overflow"],"mappings":";;;;;;;AACA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,gBAHF,QAIO,mBAJP;AAKA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,MAAT;AACA,OAAOC,cAAP;;;;AAEA,SAASC,WAAT,OAAsC;AAAA,MAAfC,WAAe,QAAfA,WAAe;;AACpC,kBAAsCJ,QAAQ,EAA9C;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AAEA,8BACER,oBAAoB,EADtB;AAAA;AAAA,MAAOS,2BAAP;AAAA,MAAoCC,iBAApC;;AAGA,WAAeC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACMF,2BAA2B,CAACG,MAA5B,KAAuCX,gBAAgB,CAACY,YAD9D;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAEqCH,iBAAiB,EAFtD;;AAAA;AAEUI,YAAAA,kBAFV;AAAA,6CAIWA,kBAAkB,CAACC,OAJ9B;;AAAA;AAAA,kBAOMN,2BAA2B,CAACG,MAA5B,KAAuCX,gBAAgB,CAACe,MAP9D;AAAA;AAAA;AAAA;;AAQIC,YAAAA,KAAK,CAACC,KAAN,CACE,2BADF,EAEE,uDAFF;AARJ,6CAYW,KAZX;;AAAA;AAAA,6CAeS,IAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,WAAeC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC8BR,iBAAiB,EAD/C;;AAAA;AACQS,YAAAA,aADR;;AAAA,gBAGOA,aAHP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAOsBrB,iBAAiB,CAAC;AACpCsB,cAAAA,aAAa,EAAE,IADqB;AAEpCC,cAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,CAAL,CAF4B;AAGpCC,cAAAA,OAAO,EAAE;AAH2B,aAAD,CAPvC;;AAAA;AAOQC,YAAAA,KAPR;AAaEhB,YAAAA,cAAc,CAACgB,KAAK,CAACC,GAAP,CAAd;AACAnB,YAAAA,WAAW,CAACkB,KAAK,CAACC,GAAP,CAAX;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,MAAIC,YAAY,GAAG,KAAC,IAAD;AAAA;AAAA,IAAnB;;AAEA,MAAInB,WAAJ,EAAiB;AACfmB,IAAAA,YAAY,GAAG,KAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,MAAM,CAACH,KAArB;AAA4B,MAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAElB;AAAP;AAApC,MAAf;AACD;;AAED,SACE,MAAC,IAAD;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEoB,MAAM,CAACD,YAApB;AAAA,gBAAmCA;AAAnC,MADF,EAEE,KAAC,cAAD;AAAgB,MAAA,IAAI,EAAC,QAArB;AAA8B,MAAA,OAAO,EAAEP,gBAAvC;AAAA;AAAA,MAFF;AAAA,IADF;AAQD;;AAED,eAAed,WAAf;AAEA,IAAMsB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,YAAY,EAAE;AACZI,IAAAA,KAAK,EAAE,MADK;AAEZC,IAAAA,MAAM,EAAE,GAFI;AAGZC,IAAAA,cAAc,EAAE,CAHJ;AAIZC,IAAAA,cAAc,EAAE,QAJJ;AAKZC,IAAAA,UAAU,EAAE,QALA;AAMZC,IAAAA,eAAe,EAAEhC,MAAM,CAACiC,UANZ;AAOZC,IAAAA,YAAY,EAAE,CAPF;AAQZC,IAAAA,QAAQ,EAAE;AARE,GADiB;AAW/Bd,EAAAA,KAAK,EAAE;AACLM,IAAAA,KAAK,EAAE,MADF;AAELC,IAAAA,MAAM,EAAE;AAFH;AAXwB,CAAlB,CAAf","sourcesContent":["import { Alert, Image, StyleSheet, Text, View } from 'react-native';\nimport {\n  launchCameraAsync,\n  useCameraPermissions,\n  PermissionStatus,\n} from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport { Colors } from '../../constants/colors';\nimport OutlinedButton from '../UI/OutlinedButton';\n\nfunction ImagePicker({ onTakeImage }) {\n  const [pickedImage, setPickedImage] = useState();\n\n  const [cameraPermissionInformation, requestPermission] =\n    useCameraPermissions();\n\n  async function verifyPermissions() {\n    if (cameraPermissionInformation.status === PermissionStatus.UNDETERMINED) {\n      const permissionResponse = await requestPermission();\n\n      return permissionResponse.granted;\n    }\n\n    if (cameraPermissionInformation.status === PermissionStatus.DENIED) {\n      Alert.alert(\n        'Insufficient Permissions!',\n        'You need to grant camera permissions to use this app.'\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  async function takeImageHandler() {\n    const hasPermission = await verifyPermissions();\n\n    if (!hasPermission) {\n      return;\n    }\n\n    const image = await launchCameraAsync({\n      allowsEditing: true,\n      aspect: [16, 9],\n      quality: 0.5,\n    });\n\n    setPickedImage(image.uri);\n    onTakeImage(image.uri);\n  }\n\n  let imagePreview = <Text>No image taken yet.</Text>;\n\n  if (pickedImage) {\n    imagePreview = <Image style={styles.image} source={{ uri: pickedImage }} />;\n  }\n\n  return (\n    <View>\n      <View style={styles.imagePreview}>{imagePreview}</View>\n      <OutlinedButton icon=\"camera\" onPress={takeImageHandler}>\n        Take Image\n      </OutlinedButton>\n    </View>\n  );\n}\n\nexport default ImagePicker;\n\nconst styles = StyleSheet.create({\n  imagePreview: {\n    width: '100%',\n    height: 200,\n    marginVertical: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.primary100,\n    borderRadius: 4,\n    overflow: 'hidden',\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}